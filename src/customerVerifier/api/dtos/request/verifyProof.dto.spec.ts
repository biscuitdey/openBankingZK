import { plainToInstance } from 'class-transformer';
import { validate } from 'class-validator';
import { SHOULD_NOT_BE_EMPTY_VALIDATION_MESSAGE } from '../../err.messages';
import { VerifyProofDto } from './verifyProof.dto';

describe('VerifyProofDto', () => {
  it('should return error in case public inputs not provided.', async () => {
    // Arrange
    const dto = {
      publicWitness: {
        verificationKey: {
          protocol: 'plonk',
          curve: 'bn128',
          nPublic: 5,
          power: 15,
          k1: '2',
          k2: '3',
          Qm: [
            '2613363480272284158768583760143187693143268210347218954303865150307379653347',
            '8664108502761579462443987042653745571042343539766668326337187509720701133950',
            '1',
          ],
          Ql: [
            '10279334263956210347187331595933052028772710060589819435556347831109134893050',
            '13067425314615632191357660164713508333378022428142953090521532889451431292761',
            '1',
          ],
          Qr: [
            '443283832003513517090776218779266598682922576370745385109960142253005177449',
            '13304972866037783836380204775498303754608358642235420547402212698268998531698',
            '1',
          ],
          Qo: [
            '2591619833869146968970496110581211316853749109583070844542597824121521761888',
            '10740673581547438713860973245929696818910468396416766400722323693311452795153',
            '1',
          ],
          Qc: [
            '6631793330534842268870360317653912816160019990570263176522606100143360424901',
            '12782354789194382556781925347075924765137414508564200721043150647484728109191',
            '1',
          ],
          S1: [
            '2462617628800447954857159617608127544228526026868960179058317347167169134014',
            '8766604811711413830867800785857564225595139163031426137375431802727398615338',
            '1',
          ],
          S2: [
            '19843691365309890449902890179331939568892782005028496192110914386931217544537',
            '11198103737741832770823862144194577236798547974481769058027535632910757068457',
            '1',
          ],
          S3: [
            '2184737399308045276331426439485766175901306652641890156881179302425060289116',
            '611936459578962713839051173627704124330683739880867914551596021493408963185',
            '1',
          ],
          X_2: [
            [
              '2321988474491776629155900984851194893971237617236929854000669698106251294482',
              '15399370655519668364856725059220045809711300771488808988180462594575219405896',
            ],
            [
              '9100548190780865726985833185894271997239588989481655992514276604785307114994',
              '6686777721814013284769376232209626585370336594432716309332101533508462474974',
            ],
            ['1', '0'],
          ],
          w: '20402931748843538985151001264530049874871572933694634836567070693966133783803',
        },
      },
      publicKey:
        'e8e391fec51831b677fc5658f91be28fc422320b810d9eae94a6b3acba67a31f',
    };
    const verifyProofDto = plainToInstance(VerifyProofDto, dto);

    // Act
    const errors = await validate(verifyProofDto);

    // Assert
    expect(errors.length).toBe(1);
    expect(errors[0].children[0].property).toEqual('publicInputs');
    expect(errors[0].children[0].constraints?.isNotEmpty).toContain(
      SHOULD_NOT_BE_EMPTY_VALIDATION_MESSAGE('publicInputs'),
    );
  });

  it('should return error in case bank name not provided.', async () => {
    // Arrange
    const dto = {
      publicWitness: {
        publicInputs: [
          '1',
          '1917185708455983382989841109461256689669653365482280287163877940782867490426',
          '8261631195034831203782766314879973243550406223964187274064739622565109609868',
          '524365426544',
          '1413127536459907793539064849240006432957482493878678732997135829127671145302',
        ],
      },
      publicKey:
        'e8e391fec51831b677fc5658f91be28fc422320b810d9eae94a6b3acba67a31f',
    };
    const verifyProofDto = plainToInstance(VerifyProofDto, dto);

    // Act
    const errors = await validate(verifyProofDto);

    // Assert
    expect(errors.length).toBe(1);
    expect(errors[0].children[0].property).toEqual('verificationKey');
    expect(errors[0].children[0].constraints?.isNotEmpty).toContain(
      SHOULD_NOT_BE_EMPTY_VALIDATION_MESSAGE('verificationKey'),
    );
  });

  it('should return error in case public key not provided.', async () => {
    // Arrange
    const dto = {
      publicWitness: {
        publicInputs: [
          '1',
          '1917185708455983382989841109461256689669653365482280287163877940782867490426',
          '8261631195034831203782766314879973243550406223964187274064739622565109609868',
          '524365426544',
          '1413127536459907793539064849240006432957482493878678732997135829127671145302',
        ],
        verificationKey: {
          protocol: 'plonk',
          curve: 'bn128',
          nPublic: 5,
          power: 15,
          k1: '2',
          k2: '3',
          Qm: [
            '2613363480272284158768583760143187693143268210347218954303865150307379653347',
            '8664108502761579462443987042653745571042343539766668326337187509720701133950',
            '1',
          ],
          Ql: [
            '10279334263956210347187331595933052028772710060589819435556347831109134893050',
            '13067425314615632191357660164713508333378022428142953090521532889451431292761',
            '1',
          ],
          Qr: [
            '443283832003513517090776218779266598682922576370745385109960142253005177449',
            '13304972866037783836380204775498303754608358642235420547402212698268998531698',
            '1',
          ],
          Qo: [
            '2591619833869146968970496110581211316853749109583070844542597824121521761888',
            '10740673581547438713860973245929696818910468396416766400722323693311452795153',
            '1',
          ],
          Qc: [
            '6631793330534842268870360317653912816160019990570263176522606100143360424901',
            '12782354789194382556781925347075924765137414508564200721043150647484728109191',
            '1',
          ],
          S1: [
            '2462617628800447954857159617608127544228526026868960179058317347167169134014',
            '8766604811711413830867800785857564225595139163031426137375431802727398615338',
            '1',
          ],
          S2: [
            '19843691365309890449902890179331939568892782005028496192110914386931217544537',
            '11198103737741832770823862144194577236798547974481769058027535632910757068457',
            '1',
          ],
          S3: [
            '2184737399308045276331426439485766175901306652641890156881179302425060289116',
            '611936459578962713839051173627704124330683739880867914551596021493408963185',
            '1',
          ],
          X_2: [
            [
              '2321988474491776629155900984851194893971237617236929854000669698106251294482',
              '15399370655519668364856725059220045809711300771488808988180462594575219405896',
            ],
            [
              '9100548190780865726985833185894271997239588989481655992514276604785307114994',
              '6686777721814013284769376232209626585370336594432716309332101533508462474974',
            ],
            ['1', '0'],
          ],
          w: '20402931748843538985151001264530049874871572933694634836567070693966133783803',
        },
      },
    };
    const verifyProofDto = plainToInstance(VerifyProofDto, dto);

    // Act
    const errors = await validate(verifyProofDto);

    // Assert
    expect(errors.length).toBe(1);
    expect(errors[0].property).toEqual('publicKey');
    expect(errors[0].constraints?.isNotEmpty).toContain(
      SHOULD_NOT_BE_EMPTY_VALIDATION_MESSAGE('publicKey'),
    );
  });

  it('should return no error if all required properties provided.', async () => {
    // Arrange
    const dto = {
      publicWitness: {
        publicInputs: [
          '1',
          '1917185708455983382989841109461256689669653365482280287163877940782867490426',
          '8261631195034831203782766314879973243550406223964187274064739622565109609868',
          '524365426544',
          '1413127536459907793539064849240006432957482493878678732997135829127671145302',
        ],
        verificationKey: {
          protocol: 'plonk',
          curve: 'bn128',
          nPublic: 5,
          power: 15,
          k1: '2',
          k2: '3',
          Qm: [
            '2613363480272284158768583760143187693143268210347218954303865150307379653347',
            '8664108502761579462443987042653745571042343539766668326337187509720701133950',
            '1',
          ],
          Ql: [
            '10279334263956210347187331595933052028772710060589819435556347831109134893050',
            '13067425314615632191357660164713508333378022428142953090521532889451431292761',
            '1',
          ],
          Qr: [
            '443283832003513517090776218779266598682922576370745385109960142253005177449',
            '13304972866037783836380204775498303754608358642235420547402212698268998531698',
            '1',
          ],
          Qo: [
            '2591619833869146968970496110581211316853749109583070844542597824121521761888',
            '10740673581547438713860973245929696818910468396416766400722323693311452795153',
            '1',
          ],
          Qc: [
            '6631793330534842268870360317653912816160019990570263176522606100143360424901',
            '12782354789194382556781925347075924765137414508564200721043150647484728109191',
            '1',
          ],
          S1: [
            '2462617628800447954857159617608127544228526026868960179058317347167169134014',
            '8766604811711413830867800785857564225595139163031426137375431802727398615338',
            '1',
          ],
          S2: [
            '19843691365309890449902890179331939568892782005028496192110914386931217544537',
            '11198103737741832770823862144194577236798547974481769058027535632910757068457',
            '1',
          ],
          S3: [
            '2184737399308045276331426439485766175901306652641890156881179302425060289116',
            '611936459578962713839051173627704124330683739880867914551596021493408963185',
            '1',
          ],
          X_2: [
            [
              '2321988474491776629155900984851194893971237617236929854000669698106251294482',
              '15399370655519668364856725059220045809711300771488808988180462594575219405896',
            ],
            [
              '9100548190780865726985833185894271997239588989481655992514276604785307114994',
              '6686777721814013284769376232209626585370336594432716309332101533508462474974',
            ],
            ['1', '0'],
          ],
          w: '20402931748843538985151001264530049874871572933694634836567070693966133783803',
        },
      },
      publicKey:
        'e8e391fec51831b677fc5658f91be28fc422320b810d9eae94a6b3acba67a31f',
    };
    const verifyProofDto = plainToInstance(VerifyProofDto, dto);

    // Act
    const errors = await validate(verifyProofDto);

    // Assert
    expect(errors.length).toBe(0);
  });
});
